Det du ska göra för att vi ska kvalificera som en basic project är:
* En meny, där man väljer hastighet (updates per second) samt start state (random spawn, preset 1, 2, 3) (skickar skiss på ett ungefärlig meny snart)
* Visualisera en 2D matrix pixel by pixel (dvs varje "cell" i matrisen är en pixel). Displayen är förresten 128x32 stor
* Kalla simulation funktionen vid varje screen update

** "Du kan börja med att få till en meny"
    - Pixel configurations
    - Comparable to previous' projects displays
    - Connect toggling to pixel change
    
    - "Den skriver 32x32 bilder till skärmen

* Selection ceasing at 0 for some reason then re-initializing afterwards
    -- Was due to 0 being a funky number 
    >> Just having
 // Speed U/S
      if(currentlySelectedRow == 0 && selectedSpeedDigit != 1){

* Decrementing and incrementing 10
    - See the time4SUPRISE 
        - assembly code
        - How it 
    > have to do display_string() each time?
    > Worst case: just have a switch-case where each case X => display_string("<text> X")
    > modify display_string such that with correct input it will fill bits < 16 without changing the preceeding contents
     thanks to a 3rd argument "newnumber"
    * 2 characthers inverted, no numbers doe 
        - display_string in setOptionAndParameters can change the line
            -- wrong with characther assignment

* Maybe it will be a need to do characther adding 

* Renaming scheme: successfully done.

- When VVV, the screen had blurry inversions, as if it was continually updated
`if(line==0 ){ // && i >= 16 - digitCount
      textbuffer[line][i] = digits[--digitCount];
    }`


-------- Old solved problems
* Modyfing the 10 and 1 2 3 4
    - Initialize with 10, 1 2 3 4, then in the code update them lines like in the 3rd lab
    > include an int for which char is to be marked.

    > make white versions which are substituted instead of the fonts. Called font-inversed

                                            V when followed by smth 
    > for(k = 0; k < 8; k++) spi_send_recv(~font[c*8 + k]);
        - Only one row can be selected each time
            > Integers: <line selected><characther selected on the right || #charachters of number before 16 to be marked>
                    >changed to be hex: 0x<row><position||#numbers selected>
                - 1st line, #characthers of number be marked before 16
                - 2nd line, which characther out of the 4
                - 3rd line not assigning anything
            > Thus able to use the for loops to select which row is going to be filled
            > for
        > in what corresponds to labwork, functions will serve to fix the function
        > void display_update(selected) 
        > <if left side is selected><which of 1 2 3 4 is selected. When also line 1 and left side selected, last integers selected>
    
    > just make images??

tvåfacceterat: sparas i runningProcess.c och sedan registeras i conLifeFunc

* How to store choices?
    >> storedSelects
        - Since it stores row 1 and 2's stuff, no need for `<line selected><characther selected on the right || #charachters of number before 16 to be marked>`
            - => lower switch statement just concerns inverting leftmost column

* Decrementing and incrementing SPEED U/S by updating the string.
    > Do something corresponding to time4io's 
  tick(&mytime);
  changeTime();
  time2string(textstring, mytime) <--- assembly stuff 
    > see Google "C format string -printf" or how tick() worked in time4io

* Rotating selection

- Image's 
    - DOWN = choose row
    - LEFT & RIGHT = Choose parameter of current row, not move from option to parameter

* Fix so that speed++ and speed-- on display 
    > display_string? 

* Confirm that selection works

* Selection freaking up the display
    -- Overlapping?
    -- option & parameter overlap

* No updating when using PORTD buttons
    -- maybe values are updated but not on display?

    * Not even updating when if(PORTD)
        >> `delay(1000);` in the run

* When delay(1000); it unconditionally goes to START U/S & closes selected "1"
    * Maybe that the delay overrides
    >> Use Timer: worked

* When `currentlySelectedRow = 0;`, selecting on second row was possible
    -- Buttons are not what I think they are BTN 4 isn't 0b1000?
        - BTN 4 & 3 currently control forward & backwards
    - That currentlySelectedRow = 0 affects proves that it is possible to actively change inverted